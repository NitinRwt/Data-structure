**************************Linear Search*************************
#include <stdio.h>
int search (int arr[], int size , int element){
    for (int i=0;i<size;i++)
        if(arr[i]==element)
            return i;
        return -1;
}
    int main (){
        int arr[]={1,2,3,4,5,2,4};
        int element = 5;
        int size = sizeof(arr)/sizeof(arr[0]);
        int result = search(arr,size,element);
        (result==-1)? printf("Element not found") : printf("Element found at index: %d", result);
    }

*********************** Reverse Integer****************
#include <stdio.h>
int main(){
int n, reverse=0, remainder;
printf("enter the element:");
scanf("%d",&n);

while ( n!=0 ){
remainder = n%10;
reverse = reverse*10 +remainder;
n/=10;
}
printf("element is reverse: %d",reverse);
return 0;
}

*******************************Largest Element***********
#include <stdio.h>    
int main()    
{    
    int arr[] = {25, 11, 7, 75, 56};          
    int length = sizeof(arr)/sizeof(arr[0]);    
    int max = arr[0];    
    for (int i = 0; i < length; i++) {     
       if(arr[i] > max)    
           max = arr[i];    
    }      
    printf("Largest element present in given array: %d\n", max);    
    return 0;    
}

****************************Bubble sort*********************
#include<stdio.h>
void bubblesort(int*a,int n){
    int temp;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(a[j]<a[i]){
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    }
}
int main(){
    int a[7]={1,2,4,56,7,8,90};
    int n =7;
    bubblesort(a,n);
    for(int i=0;i<n;i++)
    printf("%d",a[i]);
    return 0;
}

******************************Linked List**************************
#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node * next;
};
void linkedlistTraversal (struct node*ptr){
    while(ptr!=NULL){
        printf("Elements:%d\n",ptr->data);
        ptr=ptr->next;
    }
}
struct node * insertAtIndex(struct node *head,int data,int Index){
    struct node *ptr=(struct node*)malloc(sizeof(struct node));
    struct node *p = head;
    int i=0;
    while(i!=Index-1){
        p=p->next;
        i++;
    }
    ptr->data=data;
    ptr->next=p->next;
    p->next=ptr;
    return head;
}
void main(){
    struct node *head;
    struct node *second;
    struct node *third;
      
    head=(struct node*)malloc(sizeof(struct node));
    second=(struct node*)malloc(sizeof(struct node));
    third=(struct node*)malloc(sizeof(struct node));
      
    head->data=30;
    head->next=second;
    second->data=40;
    second->next=third;
    third->data=50;
    third->next=NULL;
    
    printf("Before:\n");  
    linkedlistTraversal(head);
    head=insertAtIndex(head,34,1);
     printf("After:\n");
    linkedlistTraversal(head);
}

*************************Circular LL********************
#include<stdio.h>
#include<stdlib.h>
struct Node
{
    int data;
    struct Node *next;
};
void linkedListTraversal(struct Node *head){
    struct Node *ptr = head;
    do{
        printf("Element is %d\n", ptr->data);
        ptr = ptr->next;
    }while(ptr!=head);
}
struct Node * insertAtFirst(struct Node *head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node * p = head->next;
    while(p->next != head){
        p = p->next;
    }
    p->next = ptr;
    ptr->next = head;
    head = ptr;
    return head;
}
int main(){
    struct Node *head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;

    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));
    
    head->data = 4;
    head->next = second;
    second->data = 3;
    second->next = third;
    third->next = fourth;
    fourth->data = 1;
    fourth->next = head;
    
    printf("Circular Linked list before insertion\n");
    linkedListTraversal(head);
    head = insertAtFirst(head, 54);
    head = insertAtFirst(head, 58);
    head = insertAtFirst(head, 59);
    printf("Circular Linked list after insertion\n");
    linkedListTraversal(head);
    return 0;
}
